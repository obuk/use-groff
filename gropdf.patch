*** gropdf.old	Wed Dec 25 06:38:46 2019
--- gropdf	Wed Dec 25 06:38:46 2019
***************
*** 22,27 ****
--- 22,38 ----
  
  use strict;
  use Getopt::Long qw(:config bundling);
+ use Encode;
+ use File::Find;
+ 
+ my $use_suppl_font = 1;
+ my $use_unicode_bookmark = 1;
+ my $D1_off_by_one = 1;
+ my $D2_reduce_remapping = 1;
+ my $D3_unicodefy = 1;
+ my $D4_keep_cache = 1;
+ my $D4_differences = 1;         # rebuild differences by a sparse array
+ my $D4_charset = 1;             # remove unused characters in charset string
  
  use constant
  {
***************
*** 30,35 ****
--- 41,47 ----
      PSNAME		=> 2,
      ASSIGNED		=> 3,
      USED		=> 4,
+     SUPPL		=> 5,
  };
  
  my $gotzlib=0;
***************
*** 79,84 ****
--- 91,97 ----
  my $stream='';	# Current Text/Graphics stream
  my $cftsz=10;	# Current font sz
  my $cft;	# Current Font
+ my $cftsup=0;	# Current Font (supplemental)
  my $lwidth=1;	# current linewidth
  my $linecap=1;
  my $linejoin=1;
***************
*** 203,208 ****
--- 216,223 ----
  my $unicodemap;
  my @idirs;
  
+ my %AGL_to_unicode;
+ 
  #Load_Config();
  
  GetOptions("F=s" => \$fd, 'I=s' => \@idirs, 'l' => \$frot, 'p=s' => \$fpsz, 'd!' => \$debug, 'v' => \$version, 'version' => \$version, 'e' => \$embedall, 'y=s' => \$Foundry, 's' => \$stats, 'u:s' => \$unicodemap);
***************
*** 245,250 ****
--- 260,266 ----
  
  LoadDownload();
  LoadDesc();
+ Load_afmtodit() if $D3_unicodefy;
  
  my $unitwidth=$desc{unitwidth};
  my $papersz=$desc{papersize};
***************
*** 391,405 ****
  	push(@{$o->{WIDTH}},$wid);
  	last if $#{$o->{DIFF}} >= 255;
      }
!     unshift(@{$o->{DIFF}},0);
      my $p=GetObj($fontlst{$fontno}->{OBJ});
  
      if (exists($p->{LastChar}) and $p->{LastChar} > 255)
      {
  	$p->{LastChar} = 255;
! 	splice(@{$o->{DIFF}},256);
  	splice(@{$o->{WIDTH}},256);
      }
  }
  
  foreach my $o (3..$objct)
--- 407,482 ----
  	push(@{$o->{WIDTH}},$wid);
  	last if $#{$o->{DIFF}} >= 255;
      }
!     unshift(@{$o->{DIFF}},0) if !$use_suppl_font || $D1_off_by_one;
      my $p=GetObj($fontlst{$fontno}->{OBJ});
  
      if (exists($p->{LastChar}) and $p->{LastChar} > 255)
      {
  	$p->{LastChar} = 255;
! 	splice(@{$o->{DIFF}}, 1 + 256);
  	splice(@{$o->{WIDTH}},256);
+ 	splice(@{$o->{DIFF}}, 1 + 255) if !$use_suppl_font;
+ 	@{$o->{DIFF}} = rebuild_differences(@{$o->{DIFF}}) if $D4_differences;
+     }
+ 
+     if ($D4_charset) {
+ 	my @charset = map $_->[PSNAME], grep defined $_->[PSNAME] && $_->[USED],
+ 	    values %{$o->{NAM}};
+ 	@{$o->{CHARSET}} = @charset
+     }
+ 
+     if ($use_suppl_font) {
+ 	my $fnt = $o;
+ 	while ($fnt = $fnt->{NEXT}) {
+ 	    my (@d, @w);
+ 
+ 	    unshift @d, 0 if $D1_off_by_one;
+ 	    foreach my $cn (0..255) {
+ 		my $ch = $fnt->{NO}->[$cn + $fnt->{SUPPL} * 256];
+ 		if ($ch && $ch->[1] && $fnt->{NAM}->{$ch->[1]}->[USED]) {
+ 		    push @d, $fnt->{NAM}->{$ch->[1]}->[PSNAME] || '/.notdef';
+ 		    push @w, $fnt->{NAM}->{$ch->[1]}->[WIDTH] || 0;
+ 		} else {
+ 		    push @d, '/.notdef';
+ 		    push @w, 0;
+ 		}
+ 	    }
+ 
+ 	    @d = rebuild_differences(@d) if $D4_differences;
+ 	    my $obj = BuildObj($objct + 1, {
+ 		%{$p}{qw/Type Subtype BaseFont FontDescriptor/},
+ 		Widths => \@w,
+ 		FirstChar => 0,
+ 		LastChar => 255,
+ 		Encoding => BuildObj($objct + 2, {
+ 		    Type => '/Encoding',
+ 		    Differences => \@d,
+ 		}),
+ 	    });
+ 	    $objct += 2;
+ 
+ 	    my $q = GetObj(2);
+ 	    $q->{Resources}->{Font}->{$fnt->{NM}.'.'.$fnt->{SUPPL}} = $obj;
+ 	}
+     }
+ }
+ 
+ sub rebuild_differences {
+     my @diff = ();
+     my @name = ();
+     my $code = shift;
+     while (1) {
+ 	local $_ = shift;
+ 	if (!defined || /^\/.notdef$/ || !/^\//) {
+ 	    push @diff, $code, @name if @name;
+ 	    last if !defined;
+ 	    $code = !/^\//? $_ : $code + @name + 1;
+ 	    @name = ();
+ 	} else {
+ 	    push @name, $_;
+ 	}
      }
+     @diff;
  }
  
  foreach my $o (3..$objct)
***************
*** 627,632 ****
--- 704,726 ----
      Msg(1,"Failed to open 'download'") if !$found;
  }
  
+ # D3. Use %AGL_to_unicode in afmtodit instead of asciify.
+ sub Load_afmtodit
+ {
+     my @afmtodit;
+     find({ wanted => sub { -x && /^afmtodit/ and push @afmtodit, $File::Find::name }, },
+ 	 grep -d, map split($cfg{RT_SEP}, $_), grep defined,
+ 	 $ENV{GROFF_BIN_DIR}, $ENV{PATH});
+     if (@afmtodit) {
+ 	open my $f, "<", $afmtodit[0];
+ 	my $afmtodit = join '', <$f>;
+ 	if ($afmtodit =~ /%AGL_to_unicode\s*=\s*(\(.*?\))\s*;/s) {
+ 	    %AGL_to_unicode = eval $1;
+ 	}
+     }
+     Msg(0, "Could not find afmtodit") if !%AGL_to_unicode;
+ }
+ 
  sub OpenFile
  {
      my $f=shift;
***************
*** 900,908 ****
  		{
  		    my $t=$1;
  		    $t=~s/\\\) /\\\\\) /g;
! 		    $t=~s/\\e/\\\\/g;
  		    $t=~m/(^.*\/Title \()(.*)(\).*)/;
  		    my ($pre,$title,$post)=($1,$2,$3);
  		    $title=~s/(?<!\\)\(/\\\(/g;
  		    $title=~s/(?<!\\)\)/\\\)/g;
  		    my @xwds=split(' ',"<< $pre$title$post >>");
--- 994,1016 ----
  		{
  		    my $t=$1;
  		    $t=~s/\\\) /\\\\\) /g;
! 		    #$t=~s/\\e/\\\\/g;
  		    $t=~m/(^.*\/Title \()(.*)(\).*)/;
  		    my ($pre,$title,$post)=($1,$2,$3);
+ 		    if ($use_unicode_bookmark) {
+ 			if ($D3_unicodefy) {
+ 			    $title = unicodefy($title);
+ 			} else {
+ 			    $title =~ s/\\\[u([0-9A-F_]+)\]/join(
+ 				'', map { pack "U", hex } split '_', $1)/eg;
+ 			}
+ 			if ($title =~ /[^[:ascii:]]/) {
+ 			    $title = join '', map sprintf("\\%o", $_),
+ 			    unpack "C*", encode("utf16", $title);
+ 			}
+ 		    } else {
+ 			$t =~ s/\\e/\\\\/g;
+ 		    }
  		    $title=~s/(?<!\\)\(/\\\(/g;
  		    $title=~s/(?<!\\)\)/\\\)/g;
  		    my @xwds=split(' ',"<< $pre$title$post >>");
***************
*** 1243,1248 ****
--- 1351,1398 ----
      }
  }
  
+ # decode groff_chars and remove escapes.
+ sub unicodefy {
+     local $_ = shift;
+     my $output = '';
+     while (length > 0) {
+ 	if (s/^\\\[(.*?)\]// || s/^\\\((..)//) {
+ 	    my ($ch, $fallback) = ($1, $&);
+ 	    $output .= decode_groff_char_to_unicode($ch) // $fallback;
+ 	} elsif (s/^\\[e\\]//) {
+ 	    $output .= '\\';
+ 	} elsif (s/^\\[ ~]// ||
+ 		 s/^\\h('[^']*'|\[.*?\])//) {
+ 	    $output .= ' ';
+ 	} elsif (s/^\\[%0|^\/,:]// ||
+ 		 s/^\\[a-zA-Z]('[^']*?'|\[.*?\])//) {
+ 	    ;
+ 	} elsif (s/^\\(.)//) {
+ 	    $output .= $1;
+ 	} else {
+ 	    s/.//;
+ 	    $output .= $&;
+ 	}
+     }
+     $output;
+ }
+ 
+ sub decode_groff_char_to_unicode {
+     my ($name) = @_;
+     if ($name =~ /^u([0-9A-F_]+)$/) {
+ 	return join '', map { pack "U", hex } split '_', $1;
+     }
+     if (my $fnt = $fontlst{$cft}->{FNT}) {
+ 	if (my $ch = $fnt->{NAM}->{$name}) {
+ 	    my $psname = substr $ch->[PSNAME], 1;
+ 	    if (my $u = $AGL_to_unicode{$psname}) {
+ 		return pack "U", hex $u;
+ 	    }
+ 	}
+     }
+     undef;
+ }
+ 
  sub FixPDFColour
  {
      my $o=shift;
***************
*** 2147,2152 ****
--- 2297,2306 ----
      {
  	$$pmsg.="$$fld 0 R$term";
      }
+     elsif ($typ eq 'STRING')
+     {
+ 	$$pmsg.="(@$fld)$term";
+     }
  }
  
  sub BuildObj
***************
*** 2190,2196 ****
      my $t1flags=0;
      my $fixwid=-1;
      my $ascent=0;
!     my $charset='';
  
      while (<$f>)
      {
--- 2344,2359 ----
      my $t1flags=0;
      my $fixwid=-1;
      my $ascent=0;
!     #my $charset='';
! 
!     $fnt{NM} = 'F'.$fontno;
!     $fnt{SUPPL} = 0;
!     #my @remap = (127..138, 145..255); # ignore ligatures. see text.enc.
!     my @remap = (0..31, 33..255);
!     $fnt{REMAP} = \@remap;
!     my @used;
!     $used[$_] = 1 for 0..255;
!     $used[$_] = 0 for @remap;
  
      while (<$f>)
      {
***************
*** 2231,2237 ****
--- 2394,2406 ----
  	    $r[0]='u0020' if $r[3] == 32;
  	    $r[0]="u00".hex($r[3]) if $r[0] eq '---';
  #	    next if $r[3] >255;
+ 	    if ($fnt{NAM}->{$r[0]}) {
+ 		Msg(0, "$r[0], $r[3], /$r[4] - dup in $ofontnm") if $debug;
+ 		#next;
+ 	    }
  	    $fnt{NAM}->{$r[0]}=[$p[0],$r[3],'/'.$r[4],$r[3],0];
+ 	    $fnt{NAM}->{$r[0]}->[SUPPL] = 0;
+ 	    $fnt{NAM}->{$r[0]}->[USED] = $used[$r[3]];
  	    $fnt{NO}->[$r[3]]=[$r[0],$r[0]];
  	    $lastnm=$r[0];
  	    $lastchr=$r[3] if $r[3] > $lastchr;
***************
*** 2242,2248 ****
  	    $fntbbox[2]=$p[0] if $p[0] > $fntbbox[2];
  	    $fntbbox[3]=$p[1] if defined($p[1]) and $p[1] > $fntbbox[3];
  	    $ascent=$p[1] if defined($p[1]) and $p[1] > $ascent and $r[3] >= 32 and $r[3] < 128;
! 	    $charset.='/'.$r[4] if defined($r[4]);
  	    $capheight=$p[1] if length($r[4]) == 1 and $r[4] ge 'A' and $r[4] le 'Z' and $p[1] > $capheight;
  	}
      }
--- 2411,2417 ----
  	    $fntbbox[2]=$p[0] if $p[0] > $fntbbox[2];
  	    $fntbbox[3]=$p[1] if defined($p[1]) and $p[1] > $fntbbox[3];
  	    $ascent=$p[1] if defined($p[1]) and $p[1] > $ascent and $r[3] >= 32 and $r[3] < 128;
! 	    #$charset.='/'.$r[4] if defined($r[4]);
  	    $capheight=$p[1] if length($r[4]) == 1 and $r[4] ge 'A' and $r[4] le 'Z' and $p[1] > $capheight;
  	}
      }
***************
*** 2258,2264 ****
--- 2427,2435 ----
      my $slant=0;
      $fnt{DIFF}=[];
      $fnt{WIDTH}=[];
+     $fnt{CHARSET}=[];
      $fnt{NAM}->{''}=[0,-1,'/.notdef',-1,0];
+     $fnt{NAM}->{''}->[SUPPL] = 0;
      $slant=-$fnt{'slant'} if exists($fnt{'slant'});
      $fnt{'spacewidth'}=700 if !exists($fnt{'spacewidth'});
  
***************
*** 2267,2356 ****
      $t1flags|=2**6 if $slant != 0;
      my $fontkey="$foundry $fnt{internalname}";
  
      if (exists($download{$fontkey}))
      {
  	# Not a Base Font
! 	my ($l1,$l2,$l3,$t1stream)=GetType1($download{$fontkey});
  	Msg(0,"Incorrect font format for '$fontkey' ($l1)") if !defined($t1stream);
! 	$fno=++$objct;
! 	$fontlst{$fontno}->{OBJ}=BuildObj($objct,
! 			{'Type' => '/Font',
! 			'Subtype' => '/Type1',
! 			'BaseFont' => '/'.$fnt{internalname},
! 			'Widths' => $fnt{WIDTH},
! 			'FirstChar' => 0,
! 			'LastChar' => $lastchr,
! 			'Encoding' => BuildObj($objct+1,
! 				    {'Type' => '/Encoding',
! 				    'Differences' => $fnt{DIFF}
! 				    }
! 				    ),
! 			'FontDescriptor' => BuildObj($objct+2,
! 					{'Type' => '/FontDescriptor',
! 					'FontName' => '/'.$fnt{internalname},
! 					'Flags' => $t1flags,
! 					'FontBBox' => \@fntbbox,
! 					'ItalicAngle' => $slant,
! 					'Ascent' => $ascent,
! 					'Descent' => $fntbbox[1],
! 					'CapHeight' => $capheight,
! 					'StemV' => 0,
! #					'CharSet' => "($charset)",
! 					'FontFile' => BuildObj($objct+3,
! 						    {'Length1' => $l1,
! 						    'Length2' => $l2,
! 						    'Length3' => $l3
! 						    }
! 						    )
! 					}
! 					)
! 			}
! 			);
! 
! 	$objct+=3;
! 	$fontlst{$fontno}->{NM}='/F'.$fontno;
! 	$pages->{'Resources'}->{'Font'}->{'F'.$fontno}=$fontlst{$fontno}->{OBJ};
! 	$fontlst{$fontno}->{FNT}=\%fnt;
! 	$obj[$objct]->{STREAM}=$t1stream;
! 
      }
      else
      {
! 	$fno=++$objct;
! 	$fontlst{$fontno}->{OBJ}=BuildObj($objct,
! 			{'Type' => '/Font',
! 			'Subtype' => '/Type1',
! 			'BaseFont' => '/'.$fnt{internalname},
! 			'Widths' => $fnt{WIDTH},
! 			'FirstChar' => 0,
! 			'LastChar' => $lastchr,
! 			'Encoding' => BuildObj($objct+1,
! 				    {'Type' => '/Encoding',
! 				    'Differences' => $fnt{DIFF}
! 				    }
! 				    ),
! 			'FontDescriptor' => BuildObj($objct+2,
! 					{'Type' => '/FontDescriptor',
! 					'FontName' => '/'.$fnt{internalname},
! 					'Flags' => $t1flags,
! 					'FontBBox' => \@fntbbox,
! 					'ItalicAngle' => $slant,
! 					'Ascent' => $ascent,
! 					'Descent' => $fntbbox[1],
! 					'CapHeight' => $capheight,
! 					'StemV' => 0,
! 					'CharSet' => "($charset)",
! 					}
! 					)
! 			}
! 			);
! 
! 	$objct+=2;
! 	$fontlst{$fontno}->{NM}='/F'.$fontno;
! 	$pages->{'Resources'}->{'Font'}->{'F'.$fontno}=$fontlst{$fontno}->{OBJ};
! 	$fontlst{$fontno}->{FNT}=\%fnt;
      }
  
      if (defined($fnt{encoding}) and $fnt{encoding} eq 'text.enc' and $ucmap ne '')
      {
  	if ($textenccmap eq '')
--- 2438,2506 ----
      $t1flags|=2**6 if $slant != 0;
      my $fontkey="$foundry $fnt{internalname}";
  
+     $fno = ++$objct;
+     $fnt{OBJ} = $fno;
+ 
+     $fontlst{$fontno}->{OBJ} = BuildObj(
+ 	$objct, {
+ 	    'Type' => '/Font',
+ 	    'Subtype' => '/Type1',
+ 	    'BaseFont' => '/'.$fnt{internalname},
+ 	    'Widths' => $fnt{WIDTH},
+ 	    'FirstChar' => 0,
+ 	    'LastChar' => $lastchr,
+ 	    'Encoding' => BuildObj(
+ 		$objct + 1, {
+ 		    'Type' => '/Encoding',
+ 		    'Differences' => $fnt{DIFF}
+ 		}
+ 	    ),
+ 	    'FontDescriptor' => BuildObj(
+ 		$objct + 2, {
+ 		    'Type' => '/FontDescriptor',
+ 		    'FontName' => '/'.$fnt{internalname},
+ 		    'Flags' => $t1flags,
+ 		    'FontBBox' => \@fntbbox,
+ 		    'ItalicAngle' => $slant,
+ 		    'Ascent' => $ascent,
+ 		    'Descent' => $fntbbox[1],
+ 		    'CapHeight' => $capheight,
+ 		    'StemV' => 0,
+ 		}
+ 	    )
+ 	}
+     );
+ 
      if (exists($download{$fontkey}))
      {
  	# Not a Base Font
! 	my ($l1,$l2,$l3,$t1stream) = GetType1($download{$fontkey});
  	Msg(0,"Incorrect font format for '$fontkey' ($l1)") if !defined($t1stream);
! 	$obj[$objct + 2]->{DATA}{FontFile} = BuildObj(
! 	    $objct + 3, {
! 		'Length1' => $l1,
! 		'Length2' => $l2,
! 		'Length3' => $l3
! 	    }
! 	);
! 	$obj[$objct + 3]->{STREAM} = $t1stream;
! 	$objct += 3;
      }
      else
      {
! 	$obj[$objct + 2]->{DATA}{CharSet} = bless $fnt{CHARSET}, 'STRING';
! 	$objct += 2;
!     }
!     if (!$D4_charset) {
! 	my @charset = map $_->[PSNAME], grep defined $_->[PSNAME],
! 	    values %{$fnt{NAM}};
! 	@{$fnt{CHARSET}} = @charset;
      }
  
+     $fontlst{$fontno}->{NM} = '/'.$fnt{NM};
+     $pages->{'Resources'}->{'Font'}->{$fnt{NM}} = $fontlst{$fontno}->{OBJ};
+     $fontlst{$fontno}->{FNT} = \%fnt;
+ 
      if (defined($fnt{encoding}) and $fnt{encoding} eq 'text.enc' and $ucmap ne '')
      {
  	if ($textenccmap eq '')
***************
*** 2379,2384 ****
--- 2529,2535 ----
      Msg(1,"Failed to open '$file'") if !defined($f);
  
      $head=GetChunk($f,1,"currentfile eexec");
+     $body=$tail='';
      $body=GetChunk($f,2,"00000000") if !eof($f);
      $tail=GetChunk($f,3,"cleartomark") if !eof($f);
  
***************
*** 2591,2599 ****
--- 2742,2752 ----
  
  #	IsText();
      $cft="$par";
+     $cftsup=0;
      $fontchg=1;
  #	$stream.="/F$cft $cftsz Tf\n" if $cftsz;
      $widtbl=CacheWid($par);
+     if (!$D4_keep_cache) {
      $origwidtbl=[];
  
      foreach my $w (@{$fnt->{NO}})
***************
*** 2602,2607 ****
--- 2755,2761 ----
      }
  
  #     $krntbl=$fnt->{KERN};
+     } # endif !$D4_keep_cache
  }
  
  sub CacheWid
***************
*** 2620,2632 ****
--- 2774,2790 ----
  {
      my $fnt=shift;
      my @cwid;
+     if (!$D4_keep_cache) {
      $origwidtbl=[];
+     }
  
      foreach my $w (@{$fnt->{NO}})
      {
  	my $wid=(defined($w) and defined($w->[1]))?$fnt->{NAM}->{$w->[1]}->[WIDTH]:0;
  	push(@cwid,$wid*$cftsz);
+ 	if (!$D4_keep_cache) {
  	push(@{$origwidtbl},$wid);
+ 	}
      }
  
      return(\@cwid);
***************
*** 2647,2653 ****
  	if (defined($cft))
  	{
  	    $whtsz=$fontlst{$cft}->{FNT}->{spacewidth}*$cftsz;
! 	    $stream.="/F$cft $cftsz Tf\n";
  	}
  	$stream.="$curkern Tc\n";
      }
--- 2805,2813 ----
  	if (defined($cft))
  	{
  	    $whtsz=$fontlst{$cft}->{FNT}->{spacewidth}*$cftsz;
! 	    $stream.="/F$cft";
! 	    $stream.=".$cftsup" if $cftsup;
! 	    $stream.=" $cftsz Tf\n";
  	}
  	$stream.="$curkern Tc\n";
      }
***************
*** 2664,2672 ****
      if ($fontchg)
      {
  	PutLine(0);
! 	$whtsz=$fontlst{$cft}->{FNT}->{spacewidth}*$cftsz;
! 	$stream.="/F$cft $cftsz Tf\n" if $cftsz and defined($cft);
! 	$fontchg=0;
      }
  
      $mode='t';
--- 2824,2837 ----
      if ($fontchg)
      {
  	PutLine(0);
! 	if (defined($cft))
! 	{
! 	    $whtsz=$fontlst{$cft}->{FNT}->{spacewidth}*$cftsz;
! 	    $stream.="/F$cft";
! 	    $stream.=".$cftsup" if $cftsup;
! 	    $stream.=" $cftsz Tf\n";
! 	    $fontchg=0;
! 	}
      }
  
      $mode='t';
***************
*** 3303,3308 ****
--- 3468,3474 ----
  sub TextWid
  {
      my $txt=shift;
+     my $sup=shift;
      my $fnt=shift;
      my $w=0;
      my $ck=0;
***************
*** 3310,3316 ****
--- 3476,3487 ----
      foreach my $c (split('',$txt))
      {
  	my $cn=ord($c);
+ 	$cn+=$sup*256;
+ 	if ($D4_keep_cache) {
+ 	$widtbl->[$cn] = $fnt->{NAM}->{$c}->[WIDTH]*$cftsz if !defined($widtbl->[$cn]);
+ 	} else {
  	$widtbl->[$cn]=$origwidtbl->[$cn]*$cftsz if !defined($widtbl->[$cn]);
+ 	}
  	$w+=$widtbl->[$cn];
      }
  
***************
*** 3323,3328 ****
--- 3494,3502 ----
  {
      my $par=shift;
      my $fnt=$fontlst{$cft}->{FNT};
+     my $sup = shift || 0;
+     $fontchg=1 if $cftsup != $sup;
+     $cftsup = $sup;
  
      if ($kernadjust != $curkern)
      {
***************
*** 3337,3356 ****
      foreach my $j (0..length($par2)-1)
      {
  	my $cn=ord(substr($par2,$j,1));
! 	my $chnm=$fnt->{NAM}->{$fnt->{NO}->[$cn]->[1]};
  
! 	if ($chnm->[USED]==0)
! 	{
! 	    $chnm->[USED]=1;
! 	}
! 	elsif ($fnt->{NO}->[$cn]->[0] ne $fnt->{NO}->[$cn]->[1])
  	{
! 	    # A glyph has already been remapped to this char, so find a spare
! 
! 	    my $cn2=RemapChr($cn,$fnt,$fnt->{NO}->[$cn]->[0]);
! 	    $stream.="% MMM Remap $cn to $cn2\n" if $debug;
  
! 	    if ($cn2)
  	    {
  		substr($par2,$j,1)=chr($cn2);
  
--- 3511,3526 ----
      foreach my $j (0..length($par2)-1)
      {
  	my $cn=ord(substr($par2,$j,1));
! 	$cn+=$sup*256;
! 	my $chnm=$fnt->{NO}->[$cn]->[1];
  
! 	if (!$fnt->{NAM}->{$chnm}->[USED])
  	{
! 	    my ($cn2, $sup2) = RemapChr($cn, $fnt, $chnm);
! 	    $stream.="% MMM Remap $cn,$sup to $cn2,$sup2\n" if $debug;
! 	    Msg(0, "got: $fnt->{NM}.$sup2; expected: $fnt->{NM}.$sup\n") if $sup != $sup2;
  
! 	    #if ($cn2)
  	    {
  		substr($par2,$j,1)=chr($cn2);
  
***************
*** 3365,3371 ****
  	    }
  	}
      }
!     my $wid=TextWid($par2,$fnt);
  
      $par=reverse(split('',$par)) if $xrev and $par!~m/^!\|!\|(\d\d\d)/;
  
--- 3535,3541 ----
  	    }
  	}
      }
!     my $wid=TextWid($par2,$sup,$fnt);
  
      $par=reverse(split('',$par)) if $xrev and $par!~m/^!\|!\|(\d\d\d)/;
  
***************
*** 3390,3397 ****
      if ($fontchg)
      {
  	PutLine();
! 	$whtsz=$fontlst{$cft}->{FNT}->{spacewidth}*$cftsz;
! 	$stream.="/F$cft $cftsz Tf\n", $fontchg=0 if $fontchg && defined($cft);
      }
  
      $gotT=1;
--- 3560,3573 ----
      if ($fontchg)
      {
  	PutLine();
! 	if (defined($cft))
! 	{
! 	    $whtsz=$fontlst{$cft}->{FNT}->{spacewidth} * $cftsz;
! 	    $stream.="/F$cft";
! 	    $stream.=".$cftsup" if $cftsup;
! 	    $stream.=" $cftsz Tf\n";
! 	    $fontchg=0;
! 	}
      }
  
      $gotT=1;
***************
*** 3492,3500 ****
  {
      my $par=shift;
  
!     my ($par2,$nm)=FindChar($par);
! 
!     do_t($par2);
      $nomove=$fontlst{$cft}->{FNT}->{NAM}->{$par}->[WIDTH]*$cftsz ;
  }
  
--- 3668,3674 ----
  {
      my $par=shift;
  
!     do_t(FindChar($par));
      $nomove=$fontlst{$cft}->{FNT}->{NAM}->{$par}->[WIDTH]*$cftsz ;
  }
  
***************
*** 3505,3515 ****
  
      if (exists($fnt->{NAM}->{$chnm}))
      {
! 	my $ch=$fnt->{NAM}->{$chnm}->[ASSIGNED];
! 	$ch=RemapChr($ch,$fnt,$chnm) if ($ch > 255);
! 	$fnt->{NAM}->{$chnm}->[USED]=0 if $fnt->{NO}->[$ch]->[1] eq $chnm;
! 
! 	return(($ch<32)?sprintf("!|!|%03o",$ch):chr($ch),$widtbl->[$ch]);
      }
      else
      {
--- 3679,3687 ----
  
      if (exists($fnt->{NAM}->{$chnm}))
      {
! 	my ($ch,$sup,$used)=@{$fnt->{NAM}->{$chnm}}[ASSIGNED,SUPPL,USED];
! 	($ch,$sup) = RemapChr($ch,$fnt,$chnm) if !$used;
! 	return ($ch<32)? sprintf("!|!|%03o",$ch) : chr($ch), $sup;
      }
      else
      {
***************
*** 3522,3528 ****
      my $ch=shift;
      my $fnt=shift;
      my $chnm=shift;
!     my $unused=0;
  
      foreach my $un (0..$#{$fnt->{NO}})
      {
--- 3694,3760 ----
      my $ch=shift;
      my $fnt=shift;
      my $chnm=shift;
!     my $unused;
! 
!     if ($use_suppl_font) {
! 
! 	# Reduce character remapping if not suppl font.
! 	if ($D2_reduce_remapping &&
! 	    !$fnt->{SUPPL} && !$fnt->{NAM}->{$chnm}->[USED]) {
! 	    my ($l, $r) = (0, $#{$fnt->{REMAP}});
! 	    while ($l <= $r) {
! 		if ($fnt->{REMAP}->[my $m = int(($l + $r) / 2)] == $ch) {
! 		    #$stream .= "% AAA Use $chnm ($ch) as is\n" if $debug;
! 		    splice @{$fnt->{REMAP}}, $m, 1;
! 		    $fnt->{NAM}->{$chnm}->[USED] = 1;
! 		    return ($ch, $fnt->{SUPPL});
! 		} elsif ($fnt->{REMAP}->[$m] > $ch) {
! 		    $r = $m - 1;
! 		} else {
! 		    $l = $m + 1;
! 		}
! 	    }
! 	}
! 
! 	while (defined(my $un = shift @{$fnt->{REMAP}})) {
! 	    my $ux = $un + $fnt->{SUPPL} * 256;
! 	    my $glyph = $fnt->{NO}->[$ux]->[1];
! 	    $unused = $un, last if !$glyph || !$fnt->{NAM}->{$glyph}->[USED];
! 	}
! 
! 	if (!defined $unused) {
! 	    if (!$fnt->{NEXT}) {
! 		my $fnt2 = {
! 		    %{$fnt}{qw/NM NO NAM/},
! 		    SUPPL => $fnt->{SUPPL} + 1,
! 		    REMAP => [ 0..31, 33..255 ],
! 		};
! 		$fnt->{NEXT} = $fnt2;
! 	    }
! 	    return RemapChr($ch, $fnt->{NEXT}, $chnm);
! 	}
! 
! 	my $ux = $unused + $fnt->{SUPPL} * 256;
! 	my $glyph = $fnt->{NO}->[$ux]->[1];
! 	if (!$D4_keep_cache) {
! 	delete($fontlst{$cft}->{CACHE}->{$cftsz});
! 	}
! 	@{$fnt->{NAM}->{$chnm}}[ASSIGNED, SUPPL, USED] = ($unused, $fnt->{SUPPL}, 1);
! 	$fnt->{NO}->[$ux]->[1] = $chnm;
! 	if ($D4_keep_cache) {
! 	    my $w = $fnt->{NO}->[$ux];
! 	    my $wid = (defined($w) and defined($w->[1]))?
! 		$fnt->{NAM}->{$w->[1]}->[WIDTH] : 0;
! 	    $fontlst{$cft}->{CACHE}->{$cftsz}->[$ux] = $wid * $cftsz;
! 	}
! 	$widtbl = CacheWid($cft);
! 
! 	$stream .= "% AAA Assign $chnm ($ch) to $unused".
! 	    ($fnt->{SUPPL}? ".$fnt->{SUPPL}" : '')."\n" if $debug;
! 
! 	$ch = $unused;
! 	return ($ch, $fnt->{SUPPL});
!     }
  
      foreach my $un (0..$#{$fnt->{NO}})
      {
***************
*** 3530,3536 ****
  	$unused=$un,last if $fnt->{NO}->[$un]->[1] eq '';
      }
  
!     if (!$unused)
      {
  	foreach my $un (128..255)
  	{
--- 3762,3768 ----
  	$unused=$un,last if $fnt->{NO}->[$un]->[1] eq '';
      }
  
!     if (!defined $unused)
      {
  	foreach my $un (128..255)
  	{
***************
*** 3540,3546 ****
  	}
      }
  
!     if ($unused && $unused <= 255)
      {
  	my $glyph=$fnt->{NO}->[$unused]->[1];
  	delete($fontlst{$cft}->{CACHE}->{$cftsz});
--- 3772,3778 ----
  	}
      }
  
!     if (defined $unused && $unused <= 255)
      {
  	my $glyph=$fnt->{NO}->[$unused]->[1];
  	delete($fontlst{$cft}->{CACHE}->{$cftsz});
***************
*** 3551,3562 ****
  	$stream.="% AAA Assign $chnm ($ch) to $unused\n" if $debug;
  
  	$ch=$unused;
! 	return($ch);
      }
      else
      {
  	Msg(0,"Too many glyphs used in font '$cft'");
! 	return(32);
      }
  }
  
--- 3783,3794 ----
  	$stream.="% AAA Assign $chnm ($ch) to $unused\n" if $debug;
  
  	$ch=$unused;
! 	return($ch,0);
      }
      else
      {
  	Msg(0,"Too many glyphs used in font '$cft'");
! 	return(32,0);
      }
  }
  
