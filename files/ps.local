.\" -*- nroff -*-
.\"
.\" ps.local
.\"
.
.nr my:debug-font 0
.
.\"tm configure fonts T, H, C with M, G using fspecial and fzoom.
.ds fnT-default "M\""
.ds fnH-default "G\""
.ds fnC-default "-zoom -1 M\""
.\"tm if Code is avilable, use it for C.
.if F CodeR .ds fnC-default "-zoom 900 -ftr Code\""
.\"tm use defaults if no font configuration options are specified.
.if !d fnT .ds fnT \*[fnT-default]
.if !d fnH .ds fnH \*[fnH-default]
.if !d fnC .ds fnC \*[fnC-default]
.
.ds my:fzoom-styles "R I B BI O X V BV\""
.
.de my:fspecial
.  if \\n[my:debug-font] .tm \\$0 \\$*
.  fspecial \\$1R  \\$2R
.  ie F \\$2I  .fspecial \\$1I \\$2I
.  el .fspecial \\$1I \\$2R
.  fspecial \\$1B \\$2B
.  ie F \\$2BI .fspecial \\$1BI \\$2BI
.  el .fspecial \\$1BI \\$2B
..
.de my:fzoomf
.  if \\n[my:debug-font] .tm \\$0 \\$*
.  ds my:fzoomf-family \\$1
.  nr my:fzoomf-factor \\$2
.  shift 2
.  while (\\n(.$ > 0) \{\
.    if F\\*[my:fzoomf-family]\\$1 \
.    fzoom \\*[my:fzoomf-family]\\$1 \\n[my:fzoomf-factor]
.    shift
.  \}
..
.de my:fzoom
.  if \\n[my:debug-font] .tm \\$0 \\$*
.  nr my:fzoom-factor \\$4
.  if \\n[my:fzoom-factor]=0 .nr my:fzoom-factor 1000
.  my:fzoomf \\$1 0 R
.  my:fzoomf \\$2 0 R
.  ie '\\$3'w' \{\
.    nr my:fzoom-\\$1.w \\w'\\f[\\$1R]m\\fP'
.    nr my:fzoom-\\$2.w \\w'\\f[\\$2R]m\\fP'
.    nr my:fzoom (\\n[my:fzoom-factor] * \\n[my:fzoom-\\$2.w] / \\n[my:fzoom-\\$1.w])
.  \}
.  el \{\
.    nr my:fzoom-dummy  \\w'\\f[\\$1R]M\\fP'
.    nr my:fzoom-\\$1.h (\\n[rst] - \\n[rsb])
.    nr my:fzoom-dummy  \\w'\\f[\\$2R]M\\fP'
.    nr my:fzoom-\\$2.h (\\n[rst] - \\n[rsb])
.    nr my:fzoom (\\n[my:fzoom-factor] * \\n[my:fzoom-\\$2.h] / \\n[my:fzoom-\\$1.h])
.  \}
.  my:fzoomf \\$2 \\n[my:fzoom-factor] \\*[my:fzoom-styles]
.  my:fzoomf \\$1 \\n[my:fzoom] \\*[my:fzoom-styles]
..
.
.de my:fconfig
.  if \\n[my:debug-font] .tm \\$0 \\$*
.  if \\n[.$]=0 .return
.  ds my:font \\$1
.  shift
.  nr my:font-ftr 0
.  nr my:fconfig-zoom 0
.  nr my:fconfig-ratio 0
.  ds my:fconfig-dir h
.  nr my:fconfig-easy 1
.  if '\\*[my:font]'C' .ds my:fconfig-dir w
.  while \\n(.$ \{\
.    ds my:font-c \\$1
.    substring my:font-c 0 0
.    ie !'\\*[my:font-c]'-' .break
.    el \{ .ie '\\$1'-ftr' \{\
.      nr my:font-ftr 1
.    \}
.    el \{ .ie '\\$1'-zoom' \{\
.      shift
.      nr my:fconfig-zoom \\$1
.    \}
.    el \{ .ie '\\$1'-w' \{\
.      ds my:fconfig-dir w
.    \}
.    el \{ .ie '\\$1'-h' \{\
.      ds my:fconfig-dir h
.    \}
.    el \{ .ie '\\$1'-strict' \{\
.      nr my:fconfig-easy 0
.    \}
.    el \{ .ie '\\$1'-debug' \{\
.      nr my:fconfig-debug 1
.    \}
.    el \{\
.      tm \\n(.F:\\n(.c: config error: -dfn\\*[my:font]='\\$*'
.    \}\}\}\}\}\}\}
.    shift
.  \}
.
.  if !'\\$1'\\*[my:font]' \{\
.    my:fspecial \\*[my:font] \\$1
.    if \\n[my:fconfig-easy] \
.      my:fspecial \\$1 \\*[my:font]
.  \}
.  ie \\n[my:fconfig-zoom]>=0 \{\
.    my:fzoom \\$1 \\*[my:font] \\*[my:fconfig-dir] \\n[my:fconfig-zoom]
.  \}
.  if \\n[my:font-ftr] \{\
.    ftr \\*[my:font]R  \\$1R
.    ftr \\*[my:font]I  \\$1I
.    ftr \\*[my:font]B  \\$1B
.    ftr \\*[my:font]BI \\$1BI
.    ftr \\*[my:font]O  \\$1I
.    ftr \\*[my:font]X  \\$1BI
.    ftr \\*[my:font]   \\$1R
.    if '\\*[my:font]'C' \{\
.      ftr \\*[my:font]W  \\$1R
.    \}
.  \}
..
.
.my:fconfig T \*[fnT]
.my:fconfig H \*[fnH]
.my:fconfig C \*[fnC]
.
.nr pp:spacewidth \w'\f(TR \fP'
.
.\" mimic punctuation marks in proportional fonts.
.\" https://www.w3.org/TR/jlreq/ja/#character_classes
.\"
.\" A.1 Opening brackets (cl-01)
.if (\w'\[u2018]' > 0.8m) .char \[u2018] \h'-0.5m'\[u2018]\" ‘
.if (\w'\[u201C]' > 0.8m) .char \[u201C] \h'-0.5m'\[u201C]\" “
.\"char \[u0028] \[u0028]\" (
.if (\w'\[uFF08]' > 0.8m) .char \[uFF08] \h'-0.5m'\[uFF08]\" （
.if (\w'\[u3014]' > 0.8m) .char \[u3014] \h'-0.5m'\[u3014]\" 〔
.\"char \[u005B] \[u005B]\" [
.if (\w'\[uFF3B]' > 0.8m) .char \[uFF3B] \h'-0.5m'\[uFF3B]\" ［
.\"char \[u007B] \[u007B]\" {
.if (\w'\[uFF5B]' > 0.8m) .char \[uFF5B] \h'-0.5m'\[uFF5B]\" ｛
.if (\w'\[u3008]' > 0.8m) .char \[u3008] \h'-0.5m'\[u3008]\" 〈
.if (\w'\[u300A]' > 0.8m) .char \[u300A] \h'-0.5m'\[u300A]\" 《
.if (\w'\[u300C]' > 0.8m) .char \[u300C] \h'-0.5m'\[u300C]\" 「
.if (\w'\[u300E]' > 0.8m) .char \[u300E] \h'-0.5m'\[u300E]\" 『
.if (\w'\[u3010]' > 0.8m) .char \[u3010] \h'-0.5m'\[u3010]\" 【
.if  c  \[u2985] \
.if (\w'\[u2985]' > 0.8m) .char \[u2985] \h'-0.5m'\[u2985]\" ｟
.if (\w'\[uFF5F]' > 0.8m) .char \[uFF5F] \h'-0.5m'\[uFF5F]\" ｟
.if (\w'\[u3018]' > 0.8m) .char \[u3018] \h'-0.5m'\[u3018]\" 〘
.if (\w'\[u3016]' > 0.8m) .char \[u3016] \h'-0.5m'\[u3016]\" 〖
.\"char \[u00AB] \[u00AB]\" «
.if (\w'\[u301D]' > 0.8m) .char \[u301D] \h'-0.5m'\[u301D]\" 〝
.
.\" A.2 Closing brackets (cl-02)
.if (\w'\[u2019]' > 0.8m) .char \[u2019] \[u2019]\h'-0.5m'\" ’
.if (\w'\[u201D]' > 0.8m) .char \[u201D] \[u201D]\h'-0.5m'\" ”
.\"char \[u0029] \[u0029]\" )
.if (\w'\[uFF09]' > 0.8m) .char \[uFF09] \[uFF09]\h'-0.5m'\" ）
.if (\w'\[u3015]' > 0.8m) .char \[u3015] \[u3015]\h'-0.5m'\" 〕
.\"char \[u005D] \[u005D]\" ]
.if (\w'\[uFF3D]' > 0.8m) .char \[uFF3D] \[uFF3D]\h'-0.5m'\" ］
.\"char \[u007D] \[u007D]\" }
.if (\w'\[uFF5D]' > 0.8m) .char \[uFF5D] \[uFF5D]\h'-0.5m'\" ｝
.if (\w'\[u3009]' > 0.8m) .char \[u3009] \[u3009]\h'-0.5m'\" 〉
.if (\w'\[u300B]' > 0.8m) .char \[u300B] \[u300B]\h'-0.5m'\" 》
.if (\w'\[u300D]' > 0.8m) .char \[u300D] \[u300D]\h'-0.5m'\" 」
.if (\w'\[u300F]' > 0.8m) .char \[u300F] \[u300F]\h'-0.5m'\" 』
.if (\w'\[u3011]' > 0.8m) .char \[u3011] \[u3011]\h'-0.5m'\" 】
.if  c  \[u2986] \
.if (\w'\[u2986]' > 0.8m) .char \[u2986] \[u2986]\h'-0.5m'\" ⦆
.if (\w'\[uFF60]' > 0.8m) .char \[uFF60] \[uFF60]\h'-0.5m'\" ｠
.if (\w'\[u3019]' > 0.8m) .char \[u3019] \[u3019]\h'-0.5m'\" 〙
.if (\w'\[u3017]' > 0.8m) .char \[u3017] \[u3017]\h'-0.5m'\" 〗
.\"char \[u00BB]  \[u00BB]\" »
.if (\w'\[u301F]' > 0.8m) .char \[u301F] \[u301F]\h'-0.5m'\" 〟
.
.\" A.3 Hyphens (cl-03)
.if (\w'\[u2010]' > 0.8m) .char \[u2010] \h'-0.25m'\[u2010]\h'-0.25m'\" ‐
.\"char \[u301C] \[u301C]\" 〜
.if (\w'\[u30A0]' > 0.8m) .char \[u30A0] \h'-0.25m'\[u30A0]\h'-0.25m'\" ゠
.\"char \[u2013] \[u2013]\" –
.
.\" A.4 Dividing punctuation marks (cl-04)
.\"char \[u0021] \[u0021]\" ！
.if (\w'\[uFF01]' > 0.8m) .char \[uFF01] \h'-0.25m'\[uFF01]\h'-0.25m'\" ！
.\"char \[u003F] \[u003F]\" ？
.if (\w'\[uFF1F]' > 0.8m) .char \[uFF1F] \h'-0.15m'\[uFF1F]\h'-0.20m'\" ？
.\"char \[u203C] \[u203C]\" ‼
.\"char \[u2047] \[u2047]\" ⁇
.\"char \[u2048] \[u2048]\" ⁈
.\"char \[u2049] \[u2049]\" ⁉
.
.\" A.5 Middle dots (cl-05)
.if (\w'\[u30FB]' > 0.8m) .char \[u30FB] \h'-0.25m'\[u30FB]\h'-0.25m'\" ・
.\"char \[u003A] \[u003A]\" ：
.if (\w'\[uFF1A]' > 0.8m) .char \[uFF1A] \h'-0.25m'\[uFF1A]\h'-0.25m'\" ：
.\"char \[u003B] \[u003B]\" ；
.if (\w'\[uFF1B]' > 0.8m) .char \[uFF1B] \h'-0.25m'\[uFF1B]\h'-0.25m'\" ；
.
.\" A.6 Full stops (cl-06)
.if (\w'\[u3002]' > 0.8m) .char \[u3002] \[u3002]\h'-0.5m'\" 。
.\"char \[u002E] \[u002E]\" ．
.if (\w'\[uFF0E]' > 0.8m) .char \[uFF0E] \[uFF0E]\h'-0.5m'\" ．
.
.\" A.7 Commas (cl-07)
.if (\w'\[u3001]' > 0.8m) .char \[u3001] \[u3001]\h'-0.5m'\" 、
.\"char \[u002C] \[u002C]\" ，
.if (\w'\[uFF0C]' > 0.8m) .char \[uFF0C] \[uFF0C]\h'-0.5m'\" ，
.
.\" EOF
