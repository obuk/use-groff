diff --git a/src/roff/troff/env.h b/src/roff/troff/env.h
index c62bb86c..e72cfc29 100644
--- a/src/roff/troff/env.h
+++ b/src/roff/troff/env.h
@@ -159,6 +159,7 @@ class environment {
   font_family *prev_family;
   font_family *family;
   int space_size;		// in 36ths of an em
+  int prev_space_size;          // xxxxx
   int sentence_space_size;	// same but for spaces at the end of sentences
   int adjust_mode;
   int fill;
@@ -299,6 +300,11 @@ public:
   hunits get_prev_text_length();	// .n
   hunits get_space_width() { return env_space_width(this); }
   int get_space_size() { return space_size; }	// in ems/36
+  // xxxxx
+  int save_space_size() { return prev_space_size = space_size; }
+  int restore_space_size() { return space_size = prev_space_size; }
+  int set_space_size(int n) { return space_size = n; }
+  // xxxxx
   int get_sentence_space_size() { return sentence_space_size; }
   hunits get_narrow_space_width() { return env_narrow_space_width(this); }
   hunits get_half_narrow_space_width()
diff --git a/src/roff/troff/input.cpp b/src/roff/troff/input.cpp
index 8a642ba1..61a4da91 100644
--- a/src/roff/troff/input.cpp
+++ b/src/roff/troff/input.cpp
@@ -2164,6 +2164,31 @@ void token::next()
 	if (!compatible_flag)
 	  have_input = 1;
 	break;
+
+      case 'j':                 // xxxxx
+	{
+	  symbol s = read_escape_name(ALLOW_EMPTY);
+	  if (s.is_null())
+	    break;
+	  const char *p;
+	  for (p = s.contents(); *p != '\0'; p++)
+	    if (!csdigit(*p))
+	      break;
+          if (s.is_empty()) {
+            curenv->restore_space_size();
+          } else {
+            if (*p) {
+              warning(WARN_NUMBER, "invalid space size %1", (char*)s.contents());
+            } else {
+              curenv->save_space_size();
+              curenv->set_space_size(atoi(s.contents()));
+            }
+          }
+	  if (!compatible_flag)
+	    have_input = 1;
+	  break;
+        }
+
       case 's':
 	if (read_size(&x))
 	  curenv->set_size(x);
