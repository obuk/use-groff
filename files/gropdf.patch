*** gropdf.old	2021-12-14 04:49:56.074133757 +0000
--- gropdf	2021-12-14 04:49:56.082133626 +0000
***************
*** 22,27 ****
--- 22,38 ----
  
  use strict;
  use Getopt::Long qw(:config bundling);
+ use Encode;
+ 
+ my $use_suppl_font = 1;
+ my $use_unicode_bookmark = 1;
+ my $D3_unicodefy = 1;
+ my $D3_afmtodit = 0;
+ my $D4_use_cache = 0;
+ my $D4_differences = 1;         # rebuild differences by a sparse array
+ my $D4_charset = 1;             # remove unused characters in charset string
+ my $O5_tounicode = 1;
+ $D3_afmtodit = 1 if $O5_tounicode;
  
  use constant
  {
***************
*** 30,35 ****
--- 41,47 ----
      PSNAME		=> 2,
      ASSIGNED		=> 3,
      USED		=> 4,
+     SUPPL		=> 5,
  };
  
  my $gotzlib=0;
***************
*** 60,66 ****
  my @obj;	# Array of PDF objects
  my $objct=0;	# Count of Objects
  my $fct=0;	# Output count
- my %fnt;	# Used fonts
  my $lct=0;	# Input Line Count
  my $src_name='';
  my %env;	# Current environment
--- 72,77 ----
***************
*** 79,84 ****
--- 90,96 ----
  my $stream='';	# Current Text/Graphics stream
  my $cftsz=10;	# Current font sz
  my $cft;	# Current Font
+ my $cftsup=0;	# Current Font (supplemental)
  my $lwidth=1;	# current linewidth
  my $linecap=1;
  my $linejoin=1;
***************
*** 206,211 ****
--- 218,227 ----
  my $unicodemap;
  my @idirs;
  
+ my %AGL_to_unicode;
+ my @ucmap_tounicode;
+ my %textenc;
+ 
  #Load_Config();
  
  GetOptions("F=s" => \$fd, 'I=s' => \@idirs, 'l' => \$frot, 'p=s' => \$fpsz, 'd!' => \$debug, 'v' => \$version, 'version' => \$version, 'e' => \$embedall, 'y=s' => \$Foundry, 's' => \$stats, 'u:s' => \$unicodemap);
***************
*** 237,242 ****
--- 253,260 ----
      }
  }
  
+ parse_cmap(\@ucmap_tounicode, $ucmap) if $O5_tounicode;
+ 
  # Search for 'font directory': paths in -f opt, shell var GROFF_FONT_PATH, default paths
  
  my $fontdir=$cfg{GROFF_FONT_PATH};
***************
*** 248,253 ****
--- 266,273 ----
  
  LoadDownload();
  LoadDesc();
+ Load_afmtodit() if $D3_unicodefy && $D3_afmtodit;
+ Load_textenc() if $O5_tounicode;
  
  my $unitwidth=$desc{unitwidth};
  my $papersz=$desc{papersize};
***************
*** 410,433 ****
  foreach my $fontno (sort keys %fontlst)
  {
      my $o=$fontlst{$fontno}->{FNT};
  
!     foreach my $ch (@{$o->{NO}})
!     {
! 	my $psname=$o->{NAM}->{$ch->[1]}->[PSNAME] || '/.notdef';
! 	my $wid=$o->{NAM}->{$ch->[1]}->[WIDTH] || 0;
  
! 	push(@{$o->{DIFF}},$psname);
! 	push(@{$o->{WIDTH}},$wid);
! 	last if $#{$o->{DIFF}} >= 255;
      }
-     unshift(@{$o->{DIFF}},0);
-     my $p=GetObj($fontlst{$fontno}->{OBJ});
  
!     if (exists($p->{LastChar}) and $p->{LastChar} > 255)
!     {
! 	$p->{LastChar} = 255;
! 	splice(@{$o->{DIFF}},256);
! 	splice(@{$o->{WIDTH}},256);
      }
  }
  
--- 430,584 ----
  foreach my $fontno (sort keys %fontlst)
  {
      my $o=$fontlst{$fontno}->{FNT};
+     rebuild_font($o);
  
!     if ($use_suppl_font) {
! 	my $g = $o;
! 	while ($g = $g->{NEXT}) {
! 	    rebuild_font($g);
! 	}
!     }
  
!     if ($D4_charset >= 0) {
! 	my @list = values %{$o->{NAM}};
!         @list = grep $_->[USED], @list if $D4_charset;
! 	my $p = GetObj($fontlst{$fontno}->{OBJ});
! 	my $q = GetObj($p->{FontDescriptor});
! 	$q->{CharSet} = bless do {
!             my %seen; [ grep defined && !$seen{$_}++, map $_->[PSNAME], @list ]
!         }, 'STRING';
      }
  
! }
! 
! sub rebuild_font {
!     my $fnt = shift;            # $fontlst{$fontno}->{FNT}
!     my $obj = $pages->{Resources}->{Font}->{$fnt->{NM}};
! 
!     if ($fnt->{SUPPL}) {
!         my $p = GetObj($obj);
!         $obj = BuildObj($objct + 1, {
!             (map +($_ => $p->{$_}), qw/Type Subtype BaseFont FontDescriptor/),
!             Encoding => BuildObj($objct + 2, {
!                 Type => '/Encoding',
!             }),
!         });
!         $objct += 2;
!         $pages->{Resources}->{Font}->{"$fnt->{NM}.$fnt->{SUPPL}"} = $obj;
!     }
! 
!     my @tounicode = ();
!     if ($O5_tounicode) {
!         if (!$fnt->{SUPPL}) {
!             @tounicode = @ucmap_tounicode;
!         }
!     }
! 
!     my (@diff, @width);
!     foreach my $cn (0..255) {
!         my $ch = $fnt->{NO}->[$cn + $fnt->{SUPPL} * 256];
!         if ($ch && defined $ch->[1] && $fnt->{NAM}->{$ch->[1]}->[USED]) {
!             push @diff, $fnt->{NAM}->{$ch->[1]}->[PSNAME] || '/.notdef';
!             push @width, $fnt->{NAM}->{$ch->[1]}->[WIDTH] || 0;
!             if ($O5_tounicode) {
!                 my $psname = substr $fnt->{NAM}->{$ch->[1]}->[PSNAME], 1;
!                 my $code = $textenc{$psname};
!                 if (defined $code && $code == $cn) {
!                     ;
!                 } else {
!                     my $hex = $AGL_to_unicode{$psname};
!                     unless (defined $hex) {
!                         $hex = $1 if $psname =~ /^uni([\dA-F_]+)/;
!                         $hex = $1 if $psname =~ /^u([\dA-F_]+)/;
!                     }
!                     if ($hex && $cn ne hex($hex)) {
!                         $hex =~ s/_/ /g;
!                         $tounicode[$cn] = "<$hex>";
!                     }
!                 }
!             }
!         } else {
!             push @diff, '/.notdef';
!             push @width, 0;
!         }
!     }
!     unshift @diff, 0;
! 
!     my $p = GetObj($obj);
!     $p->{FirstChar} = 0;
!     $p->{LastChar} = 255;
!     $p->{Widths} = \@width;
!     my $q = GetObj($p->{Encoding});
!     $q->{Differences} = \@diff;
! 
!     if ($D4_differences) {
!         my @new_diff = ();
!         my @name = ();
!         my $code = 0;
!         my $end;
!         while (1) {
!             local $_ = shift @{$q->{Differences}};
!             if (!defined || /^\/.notdef$/ || !/^\//) {
!                 $end = $code + @name if @name;
!                 push @new_diff, $code, @name if @name;
!                 last if !defined;
!                 $code = !/^\//? $_ : $code + @name + 1;
!                 @name = ();
!             } else {
!                 push @name, $_;
!             }
!         }
! 
!         my $start = $new_diff[0];
!         splice(@{$p->{Widths}}, $end) if $end < $#{$p->{Widths}};
!         splice(@{$p->{Widths}}, 0, $start) if $start > 0;
!         $p->{LastChar} = $start + $#{$p->{Widths}};
!         $p->{FirstChar} = $start;
! 
!         @{$q->{Differences}} = @new_diff;
!     }
! 
!     if ($O5_tounicode) {
!         my @bfchar;
!         for (0 .. 255) {
!             if (my $hex = $tounicode[$_]) {
!                 push @bfchar, sprintf("<%04X> %s", $_, $hex);
!             }
!         }
!         if (@bfchar) {
!             my $cmap = $ucmap;
!             $cmap =~ s/^\s*%.*//gm;
!             $cmap =~ s/\d+\s+beginbf(range|char)\s+(.*?)\s+endbf\1\s*//sg;
!             $cmap =~ s/\bendcmap\b/join "\n",
!                 sprintf("%d beginbfchar", scalar @bfchar), @bfchar, "endbfchar",
!                 $&/e;
!             $p->{ToUnicode} = BuildObj($objct + 1, {});
!             $obj[$objct + 1]->{STREAM} = $cmap;
!             $objct++;
!         }
!     }
! 
! }
! 
! sub parse_cmap {
!     my ($tounicode, $cmap) = @_;
!     $cmap =~ s/^\s*%.*//gm;
!     my $hex = qr/[\da-f]+/i;
!     while ($cmap =~ s/\d+\s+beginbf(range|char)\s*(.*?)\s*endbf\1\s*//s) {
!         my ($t, $bf) = ($1, $2);
!         while ($bf =~ s/^\s*<\s*($hex)\s*>\s*//s) {
!             my ($start, $end) = (hex $1, undef);
!             $end = hex $1 if $t eq 'range' && $bf =~ s/^\s*<\s*($hex)\s*>\s*//s;
!             $end //= $start;
!             my $value = '';
!             $value = $1 || $2 if $bf =~ s/^(?:\[\s*([^\]]+)\]|(\<[^\>]+\>|\S+))\s*//s;
!             $value =~ s/<((?:$hex|\s)+)>/my $h = $1; $h =~ s{\s}{}g; "<$h>"/eg;
!             my @value = split /\s+/, $value;
!             for ($start .. $end) {
!                 last unless @value;
!                 $tounicode->[$_] = shift @value;
!             }
!         }
      }
  }
  
***************
*** 438,444 ****
  
  #my $encrypt=BuildObj(++$objct,{'Filter' => '/Standard', 'V' => 1, 'R' => 2, 'P' => 252});
  #PutObj($objct);
! PutObj(2);
  
  my $xrefct=$fct;
  
--- 589,595 ----
  
  #my $encrypt=BuildObj(++$objct,{'Filter' => '/Standard', 'V' => 1, 'R' => 2, 'P' => 252});
  #PutObj($objct);
! PutObj($cat->{Pages});          # PutObj(2);
  
  my $xrefct=$fct;
  
***************
*** 656,661 ****
--- 807,851 ----
      Msg(1,"Failed to open 'download'") if !$found;
  }
  
+ # D3. Use %AGL_to_unicode in afmtodit instead of asciify.
+ 
+ sub catfile {
+     if (eval { require File::Spec; 1; }) {
+         File::Spec->catfile(@_);
+     } else {
+         join '/', @_;
+     }
+ }
+ 
+ sub Load_afmtodit
+ {
+     my @afmtodit = grep -x, map catfile($_, 'afmtodit'), grep /./ && -d,
+         map split($cfg{RT_SEP}, $_), grep defined, $ENV{GROFF_BIN_DIR}, $ENV{PATH};
+     if (@afmtodit) {
+ 	open my $f, "<", $afmtodit[0];
+ 	my $afmtodit = join '', <$f>;
+ 	if ($afmtodit =~ /%AGL_to_unicode\s*=\s*(\(.*?\))\s*;/s) {
+ 	    %AGL_to_unicode = eval $1;
+ 	}
+     }
+     Msg(0, "Could not find afmtodit") if !%AGL_to_unicode;
+ }
+ 
+ sub Load_textenc
+ {
+     my ($enc_file) = grep -r, map catfile($_, "devps", "text.enc"),
+         split $cfg{RT_SEP}, $fontdir;
+     if (open my $f, $enc_file) {
+         while (<$f>) {
+             s/^#.*//;
+             next unless /./;
+             my ($name, $code) = split /\s+/;
+             $textenc{$name} = $code;
+         }
+         close $f;
+     }
+ }
+ 
  sub OpenFile
  {
      my $f=shift;
***************
*** 748,756 ****
  				),
  		'Type' =>  '/Catalog'});
  
- 	    $cat=$obj[$objct]->{DATA};
  	    $objct++;
! 	    $pages=$obj[2]->{DATA};
  	    Put("%PDF-1.4\n\x25\xe2\xe3\xcf\xd3\n");
  	}
      }
--- 938,946 ----
  				),
  		'Type' =>  '/Catalog'});
  
  	    $objct++;
! 	    $cat = GetObj(1);
! 	    $pages = GetObj($cat->{Pages}); # GetObj(2)
  	    Put("%PDF-1.4\n\x25\xe2\xe3\xcf\xd3\n");
  	}
      }
***************
*** 928,937 ****
  		elsif ($pdfmark=~m/(.+) \/OUT\s*$/)
  		{
  		    my $t=$1;
! 		    $t=~s/\\\) /\\\\\) /g;
! 		    $t=~s/\\e/\\\\/g;
! 		    $t=~m/(^.*\/Title \()(.*)(\).*)/;
  		    my ($pre,$title,$post)=($1,$2,$3);
  		    $title=~s/(?<!\\)\(/\\\(/g;
  		    $title=~s/(?<!\\)\)/\\\)/g;
  		    my @xwds=split(' ',"<< $pre$title$post >>");
--- 1118,1143 ----
  		elsif ($pdfmark=~m/(.+) \/OUT\s*$/)
  		{
  		    my $t=$1;
! 		    $t=~m/(^.*\/Title \()(.*)(\)(?: \/.*?)*)$/;
  		    my ($pre,$title,$post)=($1,$2,$3);
+ 		    if ($use_unicode_bookmark) {
+ 			if ($D3_unicodefy) {
+ 			    $title = unicodefy($title);
+ 			} else {
+ 			    $title =~ s/\\\[u([0-9A-F_]+)\]/join(
+ 				'', map { pack "U", hex } split '_', $1)/eg;
+ 			    $title =~ s/\\e/\\/g;
+ 			}
+ 			if ($title =~ /[^[:ascii:]]/) {
+ 			    $title = join '', map sprintf("\\%o", $_),
+ 			    unpack "C*", encode("utf16", $title);
+ 			} else {
+ 			    $title =~ s/[\\()]/\\$&/g; # xxxxx
+ 			}
+ 		    } else {
+ 			$title =~ s/\\e/\\/g;
+ 			$title =~ s/[\\()]/\\$&/g; # xxxxx
+ 		    }
  		    $title=~s/(?<!\\)\(/\\\(/g;
  		    $title=~s/(?<!\\)\)/\\\)/g;
  		    my @xwds=split(' ',"<< $pre$title$post >>");
***************
*** 1120,1125 ****
--- 1326,1339 ----
  	    }
  	    elsif (lc($xprm[1]) eq 'markstart')
  	    {
+ 		# NEED TO FIX: In the macro .pdfhref W, if the
+ 		# Japanese description is used for the link, the
+ 		# parameters xprm [2] and xprm [3] that give the link
+ 		# height will be 0, so set appropriate values.
+ 		if (!$xprm[2] && !$xprm[3]) {
+ 		    $xprm[2] =	7.0 * $unitwidth; # xxxxx
+ 		    $xprm[3] = -0.5 * $unitwidth; # xxxxx
+ 		}
  		$mark={'rst' => ($xprm[2]+$xprm[4])/$unitwidth, 'rsb' => ($xprm[3]-$xprm[4])/$unitwidth, 'xpos' => $xpos-($xprm[4]/$unitwidth),
  			    'ypos' => $ypos, 'lead' => $xprm[4]/$unitwidth, 'pdfmark' => join(' ',@xprm[5..$#xprm])};
  	    }
***************
*** 1340,1345 ****
--- 1554,1604 ----
      }
  }
  
+ # decode groff_chars and remove escapes.
+ sub unicodefy {
+     local $_ = shift;
+     my $output = '';
+     while (length > 0) {
+ 	if (s/^\\\[(.*?)\]// || s/^\\\((..)//) {
+ 	    my ($ch, $fallback) = ($1, $&);
+ 	    $output .= decode_groff_char_to_unicode($ch) // $fallback;
+         } elsif (s/^\\f\[(.*?)\]// || s/^\\f\((..)// || s/^\\f.// ||
+                  s/^\\s-?\d+// || s/^\\[&]//) {
+             # ignore \f, \s, \&
+ 	} elsif (s/^\\[e\\]//) {
+ 	    $output .= '\\';
+ 	} elsif (s/^\\[ ~]// ||
+ 		 s/^\\h('[^']*'|\[.*?\])//) {
+ 	    $output .= ' ';
+ 	} elsif (s/^\\[%0|^\/,:]// ||
+ 		 s/^\\[a-zA-Z]('[^']*?'|\[.*?\])//) {
+ 	    ;
+ 	} elsif (s/^\\(.)//) {
+ 	    $output .= $1;
+ 	} else {
+ 	    s/.//;
+ 	    $output .= $&;
+ 	}
+     }
+     $output;
+ }
+ 
+ sub decode_groff_char_to_unicode {
+     my ($name) = @_;
+     if ($name =~ /^u([0-9A-F_]+)$/) {
+ 	return join '', map { pack "U", hex } split '_', $1;
+     }
+     if (my $fnt = $fontlst{$cft}->{FNT}) {
+ 	if (my $ch = $fnt->{NAM}->{$name}) {
+ 	    my $psname = substr $ch->[PSNAME], 1;
+ 	    if (my $u = $AGL_to_unicode{$psname}) {
+ 		return pack "U", hex $u;
+ 	    }
+ 	}
+     }
+     undef;
+ }
+ 
  sub FixPDFColour
  {
      my $o=shift;
***************
*** 1390,1395 ****
--- 1649,1659 ----
      $l=~s/Action/A/;
      $l=~s'/Subtype /URI'/S /URI';
      $l=~s(\\\[u00(..)\])(chr(hex($1)))eg;
+     $l=~s(\\\[u([0-9A-F]+)\])(
+         join '', map sprintf("%%%02x", $_), map unpack("C*", $_), split //,
+         encode("utf8", pack("U", hex($1)))
+     )eg;
+ 
      my @xwds=split(' ',"<< $l >>");
      my $annotno=BuildObj(++$objct,ParsePDFValue(\@xwds));
      my $annot=$obj[$objct];
***************
*** 2221,2226 ****
--- 2485,2491 ----
  sub PutObj
  {
      my $ono=shift;
+     ($ono)=split(' ',$ono);
      my $msg="$ono 0 obj ";
      $obj[$ono]->{XREF}=$fct;
      if (exists($obj[$ono]->{STREAM}))
***************
*** 2281,2286 ****
--- 2546,2555 ----
      {
  	$$pmsg.="$$fld 0 R$term";
      }
+     elsif ($typ eq 'STRING')
+     {
+ 	$$pmsg.="(@$fld)$term";
+     }
  }
  
  sub BuildObj
***************
*** 2326,2331 ****
--- 2595,2609 ----
      my $ascent=0;
      my $charset='';
  
+     $fnt{NM} = 'F'.$fontno;
+     $fnt{SUPPL} = 0;
+     my @remap = (127..255);
+     @remap = grep !$ucmap_tounicode[$_], @remap if $O5_tounicode;
+     $fnt{REMAP} = \@remap;
+     my @used;
+     $used[$_] = 1 for 0..255;
+     $used[$_] = 0 for @remap;
+ 
      while (<$f>)
      {
  	chomp;
***************
*** 2366,2371 ****
--- 2644,2651 ----
  	    $r[0]="u00".hex($r[3]) if $r[0] eq '---';
  #	    next if $r[3] >255;
  	    $fnt{NAM}->{$r[0]}=[$p[0],$r[3],'/'.$r[4],$r[3],0];
+ 	    $fnt{NAM}->{$r[0]}->[SUPPL] = 0;
+ 	    $fnt{NAM}->{$r[0]}->[USED] = $used[$r[3]] || 0;
  	    $fnt{NO}->[$r[3]]=[$r[0],$r[0]];
  	    $lastnm=$r[0];
  	    $lastchr=$r[3] if $r[3] > $lastchr;
***************
*** 2390,2406 ****
  
      my $fno=0;
      my $slant=0;
!     $fnt{DIFF}=[];
!     $fnt{WIDTH}=[];
      $fnt{NAM}->{''}=[0,-1,'/.notdef',-1,0];
      $slant=-$fnt{'slant'} if exists($fnt{'slant'});
!     $fnt{'spacewidth'}=700 if !exists($fnt{'spacewidth'});
  
      $t1flags|=2**0 if $fixwid > -1;
      $t1flags|=(exists($fnt{'special'}))?2**2:2**5;
      $t1flags|=2**6 if $slant != 0;
      my $fontkey="$foundry $fnt{internalname}";
  
      if (exists($download{$fontkey}))
      {
  	# Not a Base Font
--- 2670,2689 ----
  
      my $fno=0;
      my $slant=0;
!     #$fnt{DIFF}=[];
!     #$fnt{WIDTH}=[];
      $fnt{NAM}->{''}=[0,-1,'/.notdef',-1,0];
+     $fnt{NAM}->{''}->[SUPPL] = 0;
      $slant=-$fnt{'slant'} if exists($fnt{'slant'});
!     #$fnt{'spacewidth'}=700 if !exists($fnt{'spacewidth'});
!     $fnt{'spacewidth'} = 0 if !exists($fnt{'spacewidth'}); # xxxxx
  
      $t1flags|=2**0 if $fixwid > -1;
      $t1flags|=(exists($fnt{'special'}))?2**2:2**5;
      $t1flags|=2**6 if $slant != 0;
      my $fontkey="$foundry $fnt{internalname}";
  
+ 
      if (exists($download{$fontkey}))
      {
  	# Not a Base Font
***************
*** 2411,2422 ****
  			{'Type' => '/Font',
  			'Subtype' => '/Type1',
  			'BaseFont' => '/'.$fnt{internalname},
! 			'Widths' => $fnt{WIDTH},
  			'FirstChar' => 0,
  			'LastChar' => $lastchr,
  			'Encoding' => BuildObj($objct+1,
  				    {'Type' => '/Encoding',
! 				    'Differences' => $fnt{DIFF}
  				    }
  				    ),
  			'FontDescriptor' => BuildObj($objct+2,
--- 2694,2707 ----
  			{'Type' => '/Font',
  			'Subtype' => '/Type1',
  			'BaseFont' => '/'.$fnt{internalname},
! 			#'Widths' => $fnt{WIDTH},
! 			'Widths' => [],
  			'FirstChar' => 0,
  			'LastChar' => $lastchr,
  			'Encoding' => BuildObj($objct+1,
  				    {'Type' => '/Encoding',
! 				    #'Differences' => $fnt{DIFF}
! 				    'Differences' => [],
  				    }
  				    ),
  			'FontDescriptor' => BuildObj($objct+2,
***************
*** 2455,2466 ****
  			{'Type' => '/Font',
  			'Subtype' => '/Type1',
  			'BaseFont' => '/'.$fnt{internalname},
! 			'Widths' => $fnt{WIDTH},
  			'FirstChar' => 0,
  			'LastChar' => $lastchr,
  			'Encoding' => BuildObj($objct+1,
  				    {'Type' => '/Encoding',
! 				    'Differences' => $fnt{DIFF}
  				    }
  				    ),
  			'FontDescriptor' => BuildObj($objct+2,
--- 2740,2753 ----
  			{'Type' => '/Font',
  			'Subtype' => '/Type1',
  			'BaseFont' => '/'.$fnt{internalname},
! 			#'Widths' => $fnt{WIDTH},
! 			'Widths' => [],
  			'FirstChar' => 0,
  			'LastChar' => $lastchr,
  			'Encoding' => BuildObj($objct+1,
  				    {'Type' => '/Encoding',
! 				    #'Differences' => $fnt{DIFF}
! 				    'Differences' => [],
  				    }
  				    ),
  			'FontDescriptor' => BuildObj($objct+2,
***************
*** 2513,2518 ****
--- 2800,2806 ----
      Msg(1,"Failed to open '$file'") if !defined($f);
  
      $head=GetChunk($f,1,"currentfile eexec");
+     $body=$tail='';
      $body=GetChunk($f,2,"00000000") if !eof($f);
      $tail=GetChunk($f,3,"cleartomark") if !eof($f);
  
***************
*** 2710,2716 ****
      my $thispg=BuildObj($objct,
  		    {'Type' => '/Page',
  		    'Group' => {'CS' => '/DeviceRGB', 'S' => '/Transparency'},
! 		    'Parent' => '2 0 R',
  		    'Contents' => [ BuildObj($objct+1,
  				{'Length' => 0}
  				) ],
--- 2998,3004 ----
      my $thispg=BuildObj($objct,
  		    {'Type' => '/Page',
  		    'Group' => {'CS' => '/DeviceRGB', 'S' => '/Transparency'},
! 		    'Parent' => $cat->{Pages}, # '2 0 R',
  		    'Contents' => [ BuildObj($objct+1,
  				{'Length' => 0}
  				) ],
***************
*** 2768,2775 ****
--- 3056,3065 ----
  
  #	IsText();
      $cft="$par";
+     $cftsup=0;
      $fontchg=1;
  #	$stream.="/F$cft $cftsz Tf\n" if $cftsz;
+     if ($D4_use_cache) {
      $widtbl=CacheWid($par);
      $origwidtbl=[];
  
***************
*** 2779,2784 ****
--- 3069,3075 ----
      }
  
  #     $krntbl=$fnt->{KERN};
+     }
  }
  
  sub CacheWid
***************
*** 2797,2809 ****
--- 3088,3104 ----
  {
      my $fnt=shift;
      my @cwid;
+     if ($D4_use_cache) {
      $origwidtbl=[];
+     }
  
      foreach my $w (@{$fnt->{NO}})
      {
  	my $wid=(defined($w) and defined($w->[1]))?$fnt->{NAM}->{$w->[1]}->[WIDTH]:0;
  	push(@cwid,$wid*$cftsz);
+ 	if ($D4_use_cache) {
  	push(@{$origwidtbl},$wid);
+ 	}
      }
  
      return(\@cwid);
***************
*** 2824,2830 ****
  	if (defined($cft))
  	{
  	    $whtsz=$fontlst{$cft}->{FNT}->{spacewidth}*$cftsz;
! 	    $stream.="/F$cft $cftsz Tf\n";
  	}
  	$stream.="$curkern Tc\n";
      }
--- 3119,3127 ----
  	if (defined($cft))
  	{
  	    $whtsz=$fontlst{$cft}->{FNT}->{spacewidth}*$cftsz;
! 	    $stream.="/F$cft";
! 	    $stream.=".$cftsup" if $cftsup;
! 	    $stream.=" $cftsz Tf\n";
  	}
  	$stream.="$curkern Tc\n";
      }
***************
*** 2841,2849 ****
      if ($fontchg)
      {
  	PutLine(0);
  	$whtsz=$fontlst{$cft}->{FNT}->{spacewidth}*$cftsz;
! 	$stream.="/F$cft $cftsz Tf\n" if $cftsz and defined($cft);
  	$fontchg=0;
      }
  
      $mode='t';
--- 3138,3151 ----
      if ($fontchg)
      {
  	PutLine(0);
+ 	if (defined($cft))
+ 	{
  	$whtsz=$fontlst{$cft}->{FNT}->{spacewidth}*$cftsz;
! 	$stream.="/F$cft";
! 	$stream.=".$cftsup" if $cftsup;
! 	$stream.=" $cftsz Tf\n";
  	$fontchg=0;
+ 	}
      }
  
      $mode='t';
***************
*** 2876,2882 ****
--- 3178,3186 ----
  	Set_LWidth() if $lwidth < 1;
  #		$stream.="/F$cft $cftsz Tf\n";
  	$fontchg=1;
+ 	if ($D4_use_cache) {
  	$widtbl=CacheWid($cft);
+ 	}
      }
      else
      {
***************
*** 3480,3485 ****
--- 3784,3790 ----
  sub TextWid
  {
      my $txt=shift;
+     my $sup=shift;
      my $fnt=shift;
      my $w=0;
      my $ck=0;
***************
*** 3487,3494 ****
--- 3792,3804 ----
      foreach my $c (split('',$txt))
      {
  	my $cn=ord($c);
+ 	$cn+=$sup*256;
+ 	if (!$D4_use_cache) {
+ 	$w += $fnt->{NAM}->{$fnt->{NO}->[$cn]->[1]}->[WIDTH]*$cftsz;
+ 	} else {
  	$widtbl->[$cn]=$origwidtbl->[$cn]*$cftsz if !defined($widtbl->[$cn]);
  	$w+=$widtbl->[$cn];
+ 	}
      }
  
      $ck=length($txt)*$curkern;
***************
*** 3500,3505 ****
--- 3810,3818 ----
  {
      my $par=shift;
      my $fnt=$fontlst{$cft}->{FNT};
+     my $sup = shift || 0;
+     $fontchg=1 if $cftsup != $sup;
+     $cftsup = $sup;
  
      if ($kernadjust != $curkern)
      {
***************
*** 3514,3531 ****
      foreach my $j (0..length($par2)-1)
      {
  	my $cn=ord(substr($par2,$j,1));
! 	my $chnm=$fnt->{NAM}->{$fnt->{NO}->[$cn]->[1]};
  
! 	if ($chnm->[USED]==0)
! 	{
! 	    $chnm->[USED]=1;
! 	}
! 	elsif ($fnt->{NO}->[$cn]->[0] ne $fnt->{NO}->[$cn]->[1])
  	{
! 	    # A glyph has already been remapped to this char, so find a spare
! 
! 	    my $cn2=RemapChr($cn,$fnt,$fnt->{NO}->[$cn]->[0]);
! 	    $stream.="% MMM Remap $cn to $cn2\n" if $debug;
  
  	    if ($cn2)
  	    {
--- 3827,3840 ----
      foreach my $j (0..length($par2)-1)
      {
  	my $cn=ord(substr($par2,$j,1));
! 	$cn+=$sup*256;
! 	my $chnm=$fnt->{NO}->[$cn]->[1];
  
! 	if (!$fnt->{NAM}->{$chnm}->[USED])
  	{
! 	    my ($cn2, $sup2) = RemapChr($cn, $fnt, $chnm);
! 	    $stream.="% MMM Remap $cn,$sup to $cn2,$sup2\n" if $debug;
! 	    Msg(0, "got: $fnt->{NM}.$sup2; expected: $fnt->{NM}.$sup\n") if $sup != $sup2;
  
  	    if ($cn2)
  	    {
***************
*** 3542,3548 ****
  	    }
  	}
      }
!     my $wid=TextWid($par2,$fnt);
  
      $par=reverse(split('',$par)) if $xrev and $par!~m/^!\|!\|(\d\d\d)/;
  
--- 3851,3857 ----
  	    }
  	}
      }
!     my $wid=TextWid($par2,$sup,$fnt);
  
      $par=reverse(split('',$par)) if $xrev and $par!~m/^!\|!\|(\d\d\d)/;
  
***************
*** 3567,3574 ****
      if ($fontchg)
      {
  	PutLine();
  	$whtsz=$fontlst{$cft}->{FNT}->{spacewidth}*$cftsz;
! 	$stream.="/F$cft $cftsz Tf\n", $fontchg=0 if $fontchg && defined($cft);
      }
  
      $gotT=1;
--- 3876,3889 ----
      if ($fontchg)
      {
  	PutLine();
+ 	if (defined($cft))
+ 	{
  	$whtsz=$fontlst{$cft}->{FNT}->{spacewidth}*$cftsz;
! 	$stream.="/F$cft";
! 	$stream.=".$cftsup" if $cftsup;
! 	$stream.=" $cftsz Tf\n";
! 	$fontchg=0;
! 	}
      }
  
      $gotT=1;
***************
*** 3669,3677 ****
  {
      my $par=shift;
  
!     my ($par2,$nm)=FindChar($par);
! 
!     do_t($par2);
      $nomove=$fontlst{$cft}->{FNT}->{NAM}->{$par}->[WIDTH]*$cftsz ;
  }
  
--- 3984,3990 ----
  {
      my $par=shift;
  
!     do_t(FindChar($par));
      $nomove=$fontlst{$cft}->{FNT}->{NAM}->{$par}->[WIDTH]*$cftsz ;
  }
  
***************
*** 3682,3692 ****
  
      if (exists($fnt->{NAM}->{$chnm}))
      {
! 	my $ch=$fnt->{NAM}->{$chnm}->[ASSIGNED];
! 	$ch=RemapChr($ch,$fnt,$chnm) if ($ch > 255);
! 	$fnt->{NAM}->{$chnm}->[USED]=0 if $fnt->{NO}->[$ch]->[1] eq $chnm;
! 
! 	return(($ch<32)?sprintf("!|!|%03o",$ch):chr($ch),$widtbl->[$ch]);
      }
      else
      {
--- 3995,4003 ----
  
      if (exists($fnt->{NAM}->{$chnm}))
      {
! 	my ($ch,$sup,$used)=@{$fnt->{NAM}->{$chnm}}[ASSIGNED,SUPPL,USED];
! 	($ch,$sup) = RemapChr($ch,$fnt,$chnm) if !$used;
! 	return ($ch<32)? sprintf("!|!|%03o",$ch) : chr($ch), $sup;
      }
      else
      {
***************
*** 3699,3739 ****
      my $ch=shift;
      my $fnt=shift;
      my $chnm=shift;
!     my $unused=0;
  
!     foreach my $un (0..$#{$fnt->{NO}})
!     {
! 	next if $un >= 139 and $un <= 144;
! 	$unused=$un,last if $fnt->{NO}->[$un]->[1] eq '';
      }
  
!     if (!$unused)
!     {
! 	foreach my $un (128..255)
! 	{
! 	    next if $un >= 139 and $un <= 144;
! 	    my $glyph=$fnt->{NO}->[$un]->[1];
! 	    $unused=$un,last if $fnt->{NAM}->{$glyph}->[USED] == 0;
  	}
      }
  
!     if ($unused && $unused <= 255)
      {
! 	my $glyph=$fnt->{NO}->[$unused]->[1];
  	delete($fontlst{$cft}->{CACHE}->{$cftsz});
! 	$fnt->{NAM}->{$chnm}->[ASSIGNED]=$unused;
  	$fnt->{NO}->[$unused]->[1]=$chnm;
  	$widtbl=CacheWid($cft);
  
  	$stream.="% AAA Assign $chnm ($ch) to $unused\n" if $debug;
  
  	$ch=$unused;
! 	return($ch);
      }
      else
      {
  	Msg(0,"Too many glyphs used in font '$cft'");
! 	return(32);
      }
  }
  
--- 4010,4091 ----
      my $ch=shift;
      my $fnt=shift;
      my $chnm=shift;
!     my $unused;
  
!     if (!$fnt->{SUPPL} && !$fnt->{NAM}->{$chnm}->[USED]) {
! 	my ($l, $r) = (0, $#{$fnt->{REMAP}});
! 	while ($l <= $r) {
! 	    if ($fnt->{REMAP}->[my $m = int(($l + $r) / 2)] == $ch) {
! 		splice @{$fnt->{REMAP}}, $m, 1;
! 		#$stream .= "% AAA Assign $chnm ($ch) to $ch\n" if $debug;
! 		$fnt->{NAM}->{$chnm}->[USED] = 1;
! 		return ($ch, $fnt->{SUPPL});
! 	    } elsif ($fnt->{REMAP}->[$m] > $ch) {
! 		$r = $m - 1;
! 	    } else {
! 		$l = $m + 1;
! 	    }
! 	}
      }
  
!     while (defined(my $un = shift @{$fnt->{REMAP}})) {
! 	my $ux = $un + $fnt->{SUPPL} * 256;
! 	my $glyph = $fnt->{NO}->[$ux]->[1];
! 	$unused = $un, last if !$glyph || !$fnt->{NAM}->{$glyph}->[USED];
!     }
! 
!     if ($use_suppl_font) {
! 	if (!defined $unused) {
! 	    if (!$fnt->{NEXT}) {
! 		my $fnt2 = {
! 		    (map +($_ => $fnt->{$_}), qw/NM NO NAM/),
! 		    SUPPL => $fnt->{SUPPL} + 1,
! 		    REMAP => [ 0..31, 33..255 ],
! 		};
! 		$fnt->{NEXT} = $fnt2;
! 	    }
! 	    return RemapChr($ch, $fnt->{NEXT}, $chnm);
! 	}
! 
! 	my $ux = $unused + $fnt->{SUPPL} * 256;
! 	my $glyph = $fnt->{NO}->[$ux]->[1];
! 	if ($D4_use_cache) {
! 	delete($fontlst{$cft}->{CACHE}->{$cftsz});
  	}
+ 	@{$fnt->{NAM}->{$chnm}}[ASSIGNED, SUPPL, USED] = ($unused, $fnt->{SUPPL}, 1);
+ 	$fnt->{NO}->[$ux]->[1] = $chnm;
+ 	if ($D4_use_cache) {
+ 	$widtbl = CacheWid($cft);
+ 	}
+ 
+ 	$stream .= "% AAA Assign $chnm ($ch) to ".sprintf("\\%o (%d)", $unused, $unused).
+ 	    ($fnt->{SUPPL}? ".$fnt->{SUPPL}" : '')."\n" if $debug;
+ 
+ 	$ch = $unused;
+ 	return ($ch, $fnt->{SUPPL});
      }
  
!     if (defined $unused && $unused <= 255)
      {
! 	#my $glyph=$fnt->{NO}->[$unused]->[1];
! 	if ($D4_use_cache) {
  	delete($fontlst{$cft}->{CACHE}->{$cftsz});
! 	}
! 	@{$fnt->{NAM}->{$chnm}}[ASSIGNED, USED] = ($unused, 1);
  	$fnt->{NO}->[$unused]->[1]=$chnm;
+ 	if ($D4_use_cache) {
  	$widtbl=CacheWid($cft);
+ 	}
  
  	$stream.="% AAA Assign $chnm ($ch) to $unused\n" if $debug;
  
  	$ch=$unused;
! 	return($ch,0);
      }
      else
      {
  	Msg(0,"Too many glyphs used in font '$cft'");
! 	return(32,0);
      }
  }
  
***************
*** 3774,3779 ****
--- 4126,4133 ----
  
  
  1;
+ ########################################################################
+ ### Emacs settings
  # Local Variables:
  # mode: CPerl
  # End:
